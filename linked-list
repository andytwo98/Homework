#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
typedef struct NODE {
	struct NODE *next;
	char data;
}NODE;//구조체
NODE* getNode() {
	NODE *p;
	p = (NODE*)malloc(sizeof(NODE));
	p->data = NULL;
	p->next = NULL;
	return p;
}//노드 생성
void add(NODE **h, int rank, char data) {//삽입
	NODE *p = *h;
	NODE *new;
	int i;
	new = getNode();//노드 확보
	if (rank == 1) {
		if (p == NULL) {//리스트를 처음 작성할때

			new->data = data;
			*h = new;//첫 주소 변경
		}
		else {//리스트가 있는 상태에서 첫 값 수정할때
			new->next = p;
			new->data = data;
			*h = new;//첫 주소 변경
		}
	}
	else {//중간부터 수정할때
		for (i = 1; i < rank - 1; i++, p = p->next) {
		}
		new->data = data;
		new->next = p->next;
		p->next = new;
	}
}
char delete(NODE **h, int rank) {//삭제
	NODE *p = *h;
	NODE *tmp;
	int i;
	char value;
	if (rank == 1) {//맨앞에꺼 지울때
		if (p->next == NULL) {//뒤에 아무것도 없을때
			value = p->data;
			*h = p->next;//첫 주소 변경
			free(p);
		}
		else {//뒤에 노드가 있을때
			tmp = p;//임시
			value = p->data;
			*h = p->next;//첫주소 변경
			free(tmp);
		}
	}
	else {//뒤에꺼 지울때
		for (i = 1; i < rank - 1; i++, p = p->next) {
		}
		value = p->next->data;
		if (p->next->next == NULL) {//맨 뒤에꺼 지울때
			free(p->next);
			p->next = NULL;
		}
		else {//중간꺼 지울때
			tmp = p->next;
			p->next = p->next->next;
			free(tmp);
		}
	}
	return value;
}
char get(NODE *h, int rank) {//겟!
	NODE *p = h;
	int i;
	for (i = 1; i < rank; i++, p = p->next) {
	}
	return p->data;
}
void print(NODE*h) {//출력
	NODE *show = h;
	for (show = h; show != NULL; show = show->next) {
		printf("%c", show->data);
	}
}
int check(NODE *h, int rank) {// 노드 사용 가능 여부
	NODE *p = h;
	int i;
	int flag = 0;
	for (i = 0; i < rank; i++, p = p->next) {
		if (p == NULL) {
			flag = 1;
			break;
		}

	}
	return flag;
}
int main() {
	NODE *header;
	int num;
	int i;
	int rank;
	char data;
	char ch;
	header = NULL;//진입 주소 생성
	scanf("%d", &num);
	for (i = 0; i < num; i++) {
		scanf(" %c", &ch);//데이터 입력
		if (ch == 'A') {
			scanf(" %d %c", &rank, &data);//랭크 데이터 입력
			if (rank < 1 || check(header,rank-1)==1) {//위치 확인
				printf("invalid position\n");
				continue;
			}
			add(&header, rank, data);//입력
		}
		else if (ch == 'D') {
			scanf(" %d", &rank);
			if (rank<1 || check(header,rank)==1) {
				printf("invalid position\n");
				continue;
			}
			delete(&header, rank);//삭제
		}
		else if (ch == 'G') {
			scanf(" %d", &rank);
			if (rank<1 || check(header,rank)==1) {
				printf("invalid position\n");
				continue;
			}
			printf("%c\n", get(header, rank));//겟
		}
		else if (ch == 'P') {
			print(header);
			printf("\n");//출력
		}
	}

}
